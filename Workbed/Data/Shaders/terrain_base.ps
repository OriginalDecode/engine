SamplerState sampler0 	: register ( s0 );
Texture2D AlbedoTexture  	: register ( t0 );
Texture2D NormalTexture  	: register ( t1 );
Texture2D RoughnessTexture 	: register ( t2 );
Texture2D MetalnessTexture 	: register ( t3 );
Texture2D EmissiveTexture	: register ( t4 );
Texture2D OpacityTexture	: register ( t5 );
Texture2D AOTexture			: register ( t6 );
Texture2D HeightTexture		: register ( t7 );
Texture2D Displacement		: register ( t8 );
Texture2D LightmapTexture	: register ( t9 );
Texture2D ShininessTexture	: register ( t10 );
struct GBuffer
{
	float4 Albedo;
	float4 Normal;
	float4 Depth;
	float4 Emissive;
};

struct VS_OUTPUT
{
	float4 pos 		: SV_POSITION;
	float3 normal 	: NORMAL;
	float2 uv 		: TEXCOORD;
	float2 uv2 		: TEXCOORD2;
	float3 binorm 	: BINORMAL;
	float3 tang 	: TANGENT;
	float4 worldpos : POSITION;
};

GBuffer main(VS_OUTPUT input) : SV_Target
{
	float4 normal = float4(input.normal, 1);
	normal += 1;
	normal *= 0.5;


	GBuffer output = (GBuffer)0;
	float4 albedo = AlbedoTexture.Sample(sampler0, input.uv);//float4(0,1,0,1);
	albedo = pow(albedo, 2.2);
	output.Albedo = albedo;
	float roughness = 1; //RoughnessTexture.Sample(sampler0, input.uv).r;
	output.Normal = normal; //NormalTexture.Sample(sampler0, input.uv) ;
	output.Normal.w = 0;
	output.Depth = float4(input.pos.z, roughness, 0, 0);
	output.Emissive = float4(1,1,1,1);

	return output;//AlbedoTexture.Sample(sampler0, input.uv);
}