SamplerState sampler0 	: register ( s0 );

Texture2D AlbedoTexture		: register ( t0 );
Texture2D NormalTexture  	: register ( t1 );
Texture2D RoughnessTexture 	: register ( t2 );
Texture2D ReflectionTexture	: register ( t3 );
Texture2D EmissiveTexture	: register ( t4 );
Texture2D OpacityTexture	: register ( t5 );
Texture2D AOTexture			: register ( t6 );
Texture2D HeightTexture		: register ( t7 );
Texture2D Displacement		: register ( t8 );
Texture2D ShininessTexture	: register ( t10 );
Texture2D DUDVTexture		: register ( t11 );
TextureCube CubeMap		 	: register ( t9 );

struct GBuffer
{
	float4 Albedo;
	float4 Normal;
	float4 Depth;
	float4 Emissive;
};

struct VS_OUTPUT
{
	float4 pos 		: SV_POSITION;
	float3 normal 	: NORMAL;
	float2 uv 		: TEXCOORD;
	float3 binorm 	: BINORMAL;
	float3 tang 	: TANGENT;
	float4 worldpos : POSITION;
	float4 clip : TEXCOORD1;
};

struct DS_OUTPUT
{
	float4 pos : SV_POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD0;
	float3 binorm : BINORMAL;
	float3 tang : TANGENT;
	float4 worldpos : POSITION0;		
	float4 clip : TEXCOORD1;
	float4 camerapos : POSITION1;
};

float3 ReflectionFresnel(const float3 substance, const float3 light_dir, const float3 half_vector, float roughness)
{
	float LdotH = dot(light_dir, half_vector);
	LdotH = saturate(LdotH);
	LdotH = 1 - LdotH;
	LdotH = pow(LdotH, 5);
	float3 fresnel = LdotH * (1-substance);
	fresnel = fresnel / (6 - 5 * roughness);
	fresnel = substance + fresnel;
	return fresnel;
};


cbuffer b1 : register ( b1 ) 
{
	float3 color;
	float dummy;
};

GBuffer main(DS_OUTPUT input) : SV_Target
{
	float metalness = 1.0f;
	float roughness = 0.f;
	GBuffer output = (GBuffer)0;

	float4 _color = float4(lerp(float3(0,0,0), float3(1,1,1), input.worldpos.y / 255), 1);


	float3 _normal = float3(0,1,0);
	float3 nnormal = normalize(_normal );

	float3 binorm = normalize(cross(float3(0,1,0), float3(1,0,0)));
	float3 tang = normalize(cross(float3(0,1,0), binorm));
	float3x3 tangentSpaceMatrix = float3x3(tang, binorm, nnormal);
	_normal = normalize(mul(_normal.xyz, tangentSpaceMatrix));

	_normal += 1;
	_normal *= 0.5;

	output.Albedo = AlbedoTexture.Sample(sampler0, input.uv);// * _color;// float4(color, 1); //float4(color, 1); 
	output.Albedo = pow(output.Albedo, 2.2);
	output.Normal = float4(_normal, 1);
	
	output.Depth = float4(input.pos.z,1,0,0);
	
	output.Emissive = 0;

	return output;

}

GBuffer wireframe(DS_OUTPUT input) : SV_Target
{
	float metalness = 1.0f;
	float roughness = 0.f;
	GBuffer output = (GBuffer)0;
	output.Albedo =  0; //float4(0,1,0,1);
	output.Normal = float4(float3(0,1,0), metalness);
	
	output.Depth = float4(input.pos.z,1,0,1);
	
	output.Emissive = float4(0,0,0,0);

	return output;

}