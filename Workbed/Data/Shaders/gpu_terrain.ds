cbuffer per_frame : register( b0 )
{
	row_major float4x4 camera_view_x_proj;
};

cbuffer Matrices : register(b1)
{
	row_major float4x4 orientation;
	row_major float4x4 camera;
	float halfwidth;
	float3 padding;
};


struct HS_OUTPUT
{
	float4 pos : POSITION0;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD;
	float3 binorm : BINORMAL;
	float3 tang : TANGENT;
	float4 worldpos : POSITION1;	
};

struct ConstantOutputType
{
    float edges[4] : SV_TessFactor;
    float2 uv[4] : TEXCOORD;
    float inside[2] : SV_InsideTessFactor;
};

struct DS_OUTPUT
{
	float4 pos : SV_POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD0;
	float3 binorm : BINORMAL;
	float3 tang : TANGENT;
	float4 worldpos : POSITION0;	
	float4 clip : TEXCOORD1;
	float4 camerapos : POSITION1;	
	float2 worlduv : TEXCOORD2;
};


SamplerState sampler0 : register(s0);
SamplerState sampler1 : register(s1);
Texture2D HeightTexture : register (t7);

float3 FindNormal(float2 uv, float u)
{
    //u is one uint size, ie 1.0/texture size
    float2 offsets[4];
    offsets[0] = uv + float2(-u, 0);
    offsets[1] = uv + float2(u, 0);
    offsets[2] = uv + float2(0, u);
    offsets[3] = uv + float2(0, -u);
    
    float hts[4];
    for(int i = 0; i < 4; i++)
    {
        hts[i] = HeightTexture.SampleLevel(sampler1, offsets[i], 0).r * 255; //tex2D(tex, offsets[i]).x;
    }
    
    float2 _step = float2(1.0, 0.0);
    
    float3 va = normalize( float3(_step.xy, hts[1]-hts[0]) );
    float3 vb = normalize( float3(_step.yx, hts[3]-hts[2]) );
    

	// return float3(uv.x, uv.y, 1);
	// return cos(uv.x).xxx;

    return cross(va,vb).rbg; //you may not need to swizzle the normal
}

[domain("quad")]
DS_OUTPUT main(ConstantOutputType input, float2 uvwCoord : SV_DomainLocation, uint PatchID : SV_PrimitiveID , const OutputPatch<HS_OUTPUT, 4> patch)
{
	float3 vertex_pos = float3(1,1,1);
	DS_OUTPUT output = (DS_OUTPUT)0;

	vertex_pos.x = uvwCoord.x * patch[2].pos;
	vertex_pos.z = uvwCoord.y * patch[2].pos;
	output.worldpos = mul(float4(vertex_pos, 1), orientation);

	const float width = halfwidth * 2;
	const float depth = halfwidth * 2;

	float2 testUV;
	
	testUV.x = ((output.worldpos.x) / width);
	testUV.y = 1 - ((output.worldpos.z) / depth);

	float texel_size =  1.0 / 1024.0;

    float2 offsets[4];
    offsets[0] = testUV + float2(-texel_size, 0);
    offsets[1] = testUV + float2(texel_size, 0);
    offsets[2] = testUV + float2(0, texel_size);
    offsets[3] = testUV + float2(0, -texel_size);
    
	float average = 0;
    for(int i = 0; i < 4; i++)
    {
        average += HeightTexture.SampleLevel(sampler1, offsets[i], 0).r * 255; //tex2D(tex, offsets[i]).x;
    }

	average += HeightTexture.SampleLevel(sampler1, testUV, 0).r * 255;

	average /= 5.0;
	vertex_pos.y = average;

	const float height = HeightTexture.SampleLevel(sampler1, testUV, 0).r * 128;
	vertex_pos.y = height;
	
	
	

	// float4 vertex_normal = float4(testUV.x * 0.5, 1, testUV.y * 0.5, 1);

	float3 vertex_normal = FindNormal(testUV, 1.0 / 1024.f);

	// vertex_normal = normalize(vertex_normal);

	output.pos = mul(float4(vertex_pos, 1), orientation);
	output.worldpos = output.pos;
	output.pos = mul(output.pos, camera_view_x_proj);

	output.normal = float4(vertex_normal, 1);
	output.binorm = patch[0].binorm;
	output.tang = mul(patch[0].tang, orientation);

	output.uv =  uvwCoord;
	output.worlduv = testUV;
	return output;
}