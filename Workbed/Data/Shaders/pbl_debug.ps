SamplerState sampler0 	: register ( s0 );
Texture2D AlbedoTexture  	: register ( t0 );
Texture2D NormalTexture  	: register ( t1 );
Texture2D RoughnessTexture 	: register ( t2 );
Texture2D MetalnessTexture 	: register ( t3 );
Texture2D EmissiveTexture	: register ( t4 );
Texture2D OpacityTexture	: register ( t5 );
Texture2D AOTexture			: register ( t6 );
Texture2D HeightTexture		: register ( t7 );
Texture2D Displacement		: register ( t8 );
Texture2D LightmapTexture	: register ( t9 );
Texture2D ShininessTexture	: register ( t10 );

/* can I make this a include thing?? */
// struct GBuffer
// {
// 	float4 Albedo;
// 	float4 Normal;
// 	float4 Depth;
// 	float4 Emissive;
// #ifdef _DEBUG
// 	float4 IDTexture;
// 	float4 Roughness;
// 	float4 Metalness;
// 	float4 PureDepth;
// #endif
// };

#include "../../../Engine/Gbuffer.h"

struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float4 normal : NORMAL;
	float2 uv : TEXCOORD;
	float4 binorm : BINORMAL;
	float4 tang : TANGENT;
	float4 worldpos : POSITION;
#ifdef _DEBUG
	unsigned int entity_id : ID;
#endif
};

float4 ToColor(unsigned int e)
{
	float a = ((e) & 0xFF);
	float b = ((e >> 8) & 0xFF);
	float g = ((e >> 16) & 0xFF) ;
	float r = ((e >> 24) & 0xFF);
	return float4(r,g,b,a);
};

cbuffer idBuffer : register(b1)
{
	float r,g,b,a;
};


GBuffer main(VS_OUTPUT input) : SV_Target
{
	
	float3 _normal = NormalTexture.Sample(sampler0, input.uv).rgb * 2 - 1;
	// _normal.z = sqrt( 1 - pow((2*_normal.x), 2) + pow((2*_normal.y), 2)) / 2 + 0.5;

	// _normal.z = saturate(_normal.z);

	// z = ( square(1- ((2x-1)^2+(2y-1)^2) ) ) / 2 + 0.5
	// // _normal.z = reconstructed_z;
	
	float3 nnormal = normalize(input.normal.xyz );

	float3 binorm = normalize(cross(input.normal.xyz, input.tang.xyz));
	float3 tang = normalize(cross(input.normal.xyz, binorm));
	float3x3 tangentSpaceMatrix = float3x3(tang, binorm, nnormal);
	_normal = normalize(mul(_normal.xyz, tangentSpaceMatrix));

	_normal += 1;
	_normal *= 0.5;

	GBuffer output = (GBuffer)0;
	bool override_pbl = false;
	float4 metalness_override = MetalnessTexture.Sample(sampler0, input.uv);
	float4 roughness_override = RoughnessTexture.Sample(sampler0, input.uv); 


	float4 albedo = AlbedoTexture.Sample(sampler0, input.uv);

	albedo.rgb = pow(albedo.rgb, 2.2);
	output.m_Albedo = float4(albedo.rgb, metalness_override.r);
    output.m_Normal = float4(_normal, 1 - roughness_override.r);
	
	// output.Albedo.a = override_pbl ? 1 : roughness_override;

	
    // output.m_Depth.x = 1 - input.pos.z;

	// output.m_Depth.y = 1 - roughness_override.r;
	// output.m_Depth.z = metalness_override.r;
	output.m_Emissive = 0;//input.displaced;
#ifdef _DEBUG
    output.m_EntityIDTexture = float4(r,g,b,a); //ToColor(m_ID);
	output.m_Roughness = float4(roughness_override.rgb, 1);
	output.m_Metalness = float4(metalness_override.rgb, 1);
#endif

	output.m_Albedo = float4(1,1,1,1);

    return output;
};
