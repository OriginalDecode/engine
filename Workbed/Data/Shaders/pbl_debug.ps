SamplerState sampler0 	: register ( s0 );
Texture2D AlbedoTexture  	: register ( t0 );
Texture2D NormalTexture  	: register ( t1 );
Texture2D RoughnessTexture 	: register ( t2 );
Texture2D MetalnessTexture 	: register ( t3 );
Texture2D EmissiveTexture	: register ( t4 );
Texture2D OpacityTexture	: register ( t5 );
Texture2D AOTexture			: register ( t6 );
Texture2D HeightTexture		: register ( t7 );
Texture2D Displacement		: register ( t8 );
Texture2D LightmapTexture	: register ( t9 );
Texture2D ShininessTexture	: register ( t10 );

/* can I make this a include thing?? */
// struct GBuffer
// {
// 	float4 Albedo;
// 	float4 Normal;
// 	float4 Depth;
// 	float4 Emissive;
// #ifdef _DEBUG
// 	float4 IDTexture;
// 	float4 Roughness;
// 	float4 Metalness;
// 	float4 PureDepth;
// #endif
// };

#include "../../../Engine/Gbuffer.h"

struct VS_OUTPUT
{
	float4 pos : SV_POSITION;
	float4 normal : NORMAL;
	float2 uv : TEXCOORD;
	float4 binorm : BINORMAL;
	float4 tang : TANGENT;
	float4 worldpos : POSITION;
#ifdef _DEBUG
	unsigned int entity_id : ID;
#endif
};

float3 ToColor(unsigned int e)
{
	float b = ((e) & 0xFF);
	float g = ((e >> 8) & 0xFF) ;
	float r = ((e >> 16) & 0xFF);
	return float3(r,g,b);
};

GBuffer main(VS_OUTPUT input) : SV_Target
{
	float3 _normal = NormalTexture.Sample(sampler0, input.uv).rgb * 2 - 1;
	float3 nnormal = normalize(input.normal.xyz );

	float3 binorm = normalize(cross(input.normal.xyz, input.tang.xyz));
	float3 tang = normalize(cross(input.normal.xyz, binorm));
	float3x3 tangentSpaceMatrix = float3x3(tang, binorm, nnormal);
	_normal = normalize(mul(_normal.xyz, tangentSpaceMatrix));

	_normal += 1;
	_normal *= 0.5;

	GBuffer output = (GBuffer)0;
	bool override_pbl = false;
	float4 metalness_override = MetalnessTexture.Sample(sampler0, input.uv);
	float4 roughness_override = RoughnessTexture.Sample(sampler0, input.uv); 


	float4 albedo = AlbedoTexture.Sample(sampler0, input.uv);
	if(albedo.a <= 0.1)
		discard;

	albedo.rgb = pow(albedo.rgb, 2.2);
	output.m_Albedo = albedo;
	// output.Albedo.a = override_pbl ? 1 : roughness_override;
    output.m_Normal = float4(_normal,1);
    output.m_Depth.x = 1 - input.pos.z;

	output.m_Depth.y = 1 - roughness_override.r;
	output.m_Depth.z = metalness_override.r;
	output.m_Emissive = 0;//input.displaced;
#ifdef _DEBUG
    output.m_EntityIDTexture = float4(ToColor(input.entity_id), 0);
	output.m_Roughness = roughness_override.rrrr;
	output.m_Metalness = metalness_override.xxxx;
#endif

    return output;
};
