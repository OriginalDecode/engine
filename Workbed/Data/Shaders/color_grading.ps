SamplerState linear_Clamp : register ( s0 );
Texture2D ColorStrip  : register ( t0 );
Texture2D DiffuseTexture  : register ( t1 );

struct VS_OUTPUT
{
	float4 pos : SV_POSITION0;
	float2 uv : TEXCOORD;
};


float4 sampleAs3DTexture(float4 uv, float width) 
{
    float sliceSize = 1.0 / width;              // space of 1 slice
    float slicePixelSize = sliceSize / width;           // space of 1 pixel
    float sliceInnerSize = slicePixelSize * (width - 1.0);  // space of width pixels
    float zSlice0 = min(floor(uv.z * width), width - 1.0);
    float zSlice1 = min(zSlice0 + 1.0, width - 1.0);
    float xOffset = slicePixelSize * 0.5 + uv.x * sliceInnerSize;
    float s0 = xOffset + (zSlice0 * sliceSize);
    float s1 = xOffset + (zSlice1 * sliceSize);
    float4 slice0Color = ColorStrip.Sample(linear_Clamp, float2(s0, uv.y));
    float4 slice1Color = ColorStrip.Sample(linear_Clamp, float2(s1, uv.y));
    float zOffset = fmod(uv.z * width, 1.0);
    float4 result = lerp(slice0Color, slice1Color, zOffset);
    return result;
};

float4 main(VS_OUTPUT input) : SV_Target
{	
	float4 diffuse = DiffuseTexture.Sample(linear_Clamp, input.uv);    
    return sampleAs3DTexture(diffuse, 16);
}