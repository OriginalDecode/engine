cbuffer Ambient : register(b0)
{
	float4 camera_position;
	row_major float4x4 InvertedProjection;
	row_major float4x4 InvertedView;
	row_major float4x4 ShadowMVP;
	float4 light_direction;
	float4 light_color;
};

SamplerState sampler0 : register ( s0 );

Texture2D AlbedoTexture 	: register ( t0 );
Texture2D NormalTexture  	: register ( t1 );
Texture2D DepthTexture	 	: register ( t7 );
Texture2D ShadowTexture		: register ( t8 );
TextureCube CubeMap		 	: register ( t9 );
Texture2D SSAOTexture		: register ( t10 );

struct VS_OUTPUT
{
	float4 pos	: SV_POSITION0;
	float2 uv	: TEXCOORD;
};

static const float PI = 3.14159265;

// GGX Specular
// Source: http://www.filmicworlds.com/images/ggx-opt/optimized-ggx.hlsl
float G1V(float NdV, float k)
{
    return 1.0 / (NdV * (1.0 - k) + k);
};

float SchlickFresnel(float u)
{
    float m = 1.0 - u;
    return pow(m,5);
};

float GTR1(float NdH, float a)
{
    if( a >= 1.0) 
        return 1.0 / PI;

    float a2 = a*a;
    float t = 1.0 + ( a2 - 1.0 ) * NdH * NdH;
    return ( a2 - 1.0) / (PI * log(a2) * t);
};


float4 getWorldPos(float2 tex_coord, float depth)
{
    float x = tex_coord.x * 2.f - 1.f;
	float y = (1.f - tex_coord.y) * 2 - 1;
	float z = depth;
	float4 world_pos = float4(x, y, z, 1.f);
	
	world_pos = mul(world_pos, InvertedProjection);
	world_pos = world_pos / world_pos.w;
	world_pos = mul(world_pos, InvertedView);
    return world_pos;
}

// Source: https://github.com/godotengine/godot/blob/df573f5c3a76155842e43ea0dbab594e3944b114/drivers/gles3/shaders/scene.glsl
float4 main(VS_OUTPUT input) : SV_Target
{
	float4 albedo = AlbedoTexture.Sample(sampler0, input.uv);	
	float4 normal = NormalTexture.Sample(sampler0, input.uv);
	float4 depth = DepthTexture.Sample(sampler0, input.uv);

	albedo.rgb = pow(albedo.rgb, 2.2f);

	float roughness = depth.y;
	float metalness = normal.w;
    float4 pixel_pos = getWorldPos(input.uv, depth.x);

    float NdL = dot(normal, light_direction);

    return albedo * NdL;
};
