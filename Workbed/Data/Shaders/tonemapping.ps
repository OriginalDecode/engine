SamplerState sampler0  : register ( s0 );
SamplerState sampler1 : register ( s1 ); 
Texture2D DiffuseTexture   : register ( t0 );
Texture2D LuminanceTexture : register ( t1 );
Texture2D AverageLumTexture : register ( t2 );
Texture3D ColorStrip  : register ( t3 );

struct VS_OUTPUT
{
	float4 pos : SV_POSITION0;
	float2 uv : TEXCOORD;
};

static const float A = 0.22;
static const float B = 0.30;
static const float C = 0.10;
static const float D = 0.20;
static const float E = 0.01;
static const float F = 0.30;

static const float WhitePoint = 11.2;

static const float lumMin = 0.2;
static const float lumMax = 2.0;

float4 Tonemap(float4 color)
{
	return ((color*(A*color + C*B) + D*E) / (color*(A*color + B) + D*F)) - E / F;
}

float4 main(VS_OUTPUT input) : SV_Target
{	
	float4 diffuse = DiffuseTexture.Sample(sampler0, input.uv);

	// if(input.uv.x < 0.5 && input.uv.x > 0.0 && input.uv.y < 0.5 && input.uv.y > 0.0)
	// 	return diffuse;	
	return pow(diffuse, .4545);
	float4 LumPixel = LuminanceTexture.Sample(sampler0, input.uv);
	float luminance = AverageLumTexture.Sample(sampler0, input.uv).r;

	const float3 lutSize = float3(16,16,16);
    const float3 scale =  (  lutSize - 1.f)  / lutSize;
    const float3 offset = 1.0 / ( 2.0 * lutSize);
	float4 output = ColorStrip.Sample(sampler1, scale * diffuse + offset);
	luminance = min(max(luminance, lumMin), lumMax);
	float exposure = (1.03 - (2 / (2 + log10(luminance + 1 ) ) ) ) ;
	float4 color1 = (diffuse / 2) / luminance;
	float4 whitescale = 1 / Tonemap(WhitePoint * luminance);
	float lumScale = whitescale / luminance;
	float4 color = output * lumScale;

	color = saturate(color  * color1); 
	color = saturate(color1);
	return pow(color, .4545);
	
}