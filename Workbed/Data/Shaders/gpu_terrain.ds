cbuffer per_frame : register( b0 )
{
	row_major float4x4 camera_view_x_proj;
};

cbuffer Matrices : register(b1)
{
	row_major float4x4 orientation;
	row_major float4x4 camera;
	float Time;
	float3 padding;
};

struct HS_OUTPUT
{
	float4 pos : POSITION0;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD;
	float3 binorm : BINORMAL;
	float3 tang : TANGENT;
	float4 worldpos : POSITION1;	
};

struct ConstantOutputType
{
    float edges[4] : SV_TessFactor;
    float2 uv[4] : TEXCOORD;
    float inside[2] : SV_InsideTessFactor;
};

struct DS_OUTPUT
{
	float4 pos : SV_POSITION;
	float3 normal : NORMAL;
	float2 uv : TEXCOORD0;
	float3 binorm : BINORMAL;
	float3 tang : TANGENT;
	float4 worldpos : POSITION0;	
	float4 clip : TEXCOORD1;
	float4 camerapos : POSITION1;
};


SamplerState sampler0 : register(s0);
Texture2D HeightTexture : register (t7);

[domain("quad")]
DS_OUTPUT main(ConstantOutputType input, float2 uvwCoord : SV_DomainLocation, uint PatchID : SV_PrimitiveID , const OutputPatch<HS_OUTPUT, 4> patch)
{
	float3 vertex_pos = float3(1,1,1);
	DS_OUTPUT output = (DS_OUTPUT)0;

	vertex_pos.x = uvwCoord.x * patch[2].pos;
	vertex_pos.z = uvwCoord.y * patch[2].pos;
	output.worldpos = mul(float4(vertex_pos, 1), orientation);

	float2 testUV;
	testUV.x = (1024 + output.worldpos.x) / 1024.f;
	testUV.y = (1024 - output.worldpos.z) / 1024.f;


	const float y = HeightTexture.SampleLevel(sampler0, testUV, 0).r;
	vertex_pos.y = max(0, y * 128); 

	output.pos = mul(float4(vertex_pos, 1), orientation);
	output.worldpos = output.pos;
	output.pos = mul(output.pos, camera_view_x_proj);

	output.pos.y = min(0, output.pos.y);


	output.normal = patch[0].normal;
	output.binorm = patch[0].binorm;
	output.tang = patch[0].tang;

	output.uv =  uvwCoord;//uvwCoord.x * patch[1].uv + uvwCoord.y * patch[2].uv;

	return output;
}